= Python Programming =

== Articles/Tools ==

* Available License keywords: https://autopilot-docs.readthedocs.io/en/latest/license_list.html
* [[https://docs.python.org/3/library/exceptions.html|List of python exceptions]]
* [[https://docs.beeware.org/en/latest/|Write Python - Run Everywhere - Beeware]]
* [[https://docs.python.org/3.10/reference/executionmodel.html|Python execution model]]
    * code-blocks, scopes, execution frames and exceptions
* [[https://fgimian.github.io/blog/2014/04/10/using-the-python-mock-library-to-fake-regular-functions-during-tests/|Mock standalone function when unittesting]]
    * https://docs.python.org/3/library/unittest.mock.html#where-to-patch
* Unittest alternatives: https://pypi.org/project/chai/
* [[https://www.techbeamers.com/python-copy-file/#shutil-copy|Copying files]]
* [[https://pymotw.com/3/doctest/|Doctest primer]]
* Logging module resources:
    * http://nathanielobrown.com/blog/posts/quick_and_dirty_python_logging_lesson.html
    * https://docs.python-guide.org/writing/logging/
* [[https://docs.python.org/3/distutils/configfile.html|setup.cfg]]
    * [[https://github.com/crsmithdev/arrow/blob/master/setup.cfg|example]]
* [[https://github.com/crsmithdev/arrow|arrow - one class to manage dates]]
* [[https://packaging.python.org/discussions/install-requires-vs-requirements/#requirements-files|requirements.txt vs install_requires]]
* pyenv - Alternate between different python versions
* Conflict resolution with argparse: https://docs.python.org/2.4/lib/optparse-conflicts-between-options.html
  {{{python
  parser = OptionParser(conflict_handler="resolve")
  parser.add_option("-n", "--dry-run", ..., help="do no harm")
  parser.add_option("-n", "--noisy", ..., help="be noisy")
  }}}
* [[https://wiki.python.org/moin/PythonSpeed/PerformanceTips|python performance hints]]
* [[concerns when packaging c extensions in python packages]]
* [[https://skerritt.blog/dynamic-programming/#what-is-memoisation-in-dynamic-programming|dynamic-programming-in-python]]
* [[https://github.com/mbello/memory-tempfile|memory-tempfile]]
    * When to use `/tmp` and when to use `/dev/shm`: https://superuser.com/a/45509/369517
    * More information: https://superuser.com/a/1030777/369517
* Convert time since epoch to datetime:
    * `datetime.datetime.fromtimestamp(1284286794)`
* Python staticmethod vs classmethod:
    * https://stackoverflow.com/a/1669524/2843583
    * staticmethods are basically freestanding functions grouped under the
      `class` scope; classmethods are still methods of a class.
* [[https://factoryboy.readthedocs.io/en/latest/index.html|FactoryBoy]]: Better fixtures for your Django tests
* Is `Python` an interpreted or a compiled language?
    * Python is a *language specification*. One of it's implementations `CPython`,
      compiles the source code into bytecode, which then is run (interpreted)
      inside the Python VM.
    * Link: https://stackoverflow.com/a/2998228/2843583

== Abreviations ==

* `bdist`: build distribution
* `sdist`: source distribution -> tar.gz
* `pip`  : pip installs packages

== Excellent Packages / Modules ==

* https://github.com/thclark/rstcloth
    * Commit hooks for running autoformatting
    * Based on a cookiecutter template

== Doctest - Ignore Exception Details ==

{{{python
>>> cli_timestamp_to_ns("123") # doctest: +IGNORE_EXCEPTION_DETAIL
Traceback (most recent call last):
python_utils.custom_exceptions.InvalidCLITimestampError: Invalid timestamp provided: 123
}}}

* Run a single test method (or a single test class or ...): `python3 -m unittest package.path.to.class.or.method`

== FAQ ==

* See loaded modules in python: `set(sys.modules) & set(globals())`
* Pip downloads every single version of a package:
    * Use `--use-deprecated=legacy-resolver` instead - https://github.com/pypa/pip/issues/8713

== numpy ==

Print numpy array without truncation:
    `np.set_printoptions(threshold=sys.maxsize)`

Quaternions:
    * Form: w, x, y, z

== pickle ==

* Preferred extension: `pkl` / `pickle` - https://stackoverflow.com/questions/40433474/preferred-or-most-common-file-extension-for-pickle-files/40433504
* Use the `dump`, `load` methods - open file inline for auto-close

== Path ==

* Python3 pathlib library: https://realpython.com/python-pathlib/

== Plotting ==

There's a gazzilion of 2D statistics/plotting libraries in python. Just select a
single damn one and stick to it - None of it supports 3D visualisation

* bokeh: https://bokeh.pydata.org/en/latest/docs/user_guide/quickstart.html
* gpgpy
* plotly
* seaborn
* altair
* pygal

=== 3D Plotting ===

Only thing that's available (~end 2019) is matplotlib. Just use it...

* https://medium.com/@sebastiannorena/3d-plotting-in-python-b0dc1c2e5e38
* https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html
* https://plot.ly/python/3d-surface-plots/

* Matplotlib rcParams available parameters: https://matplotlib.org/3.1.0/tutorials/introductory/customizing.html

== Recipes ==


=== argparse - increase line length in help messages ===

{{{python
parser = argparse.ArgumentParser(description="Help line 1\n" +
                                             "Help line 2",
                                 formatter_class=lambda prog: argparse.RawTextHelpFormatter(prog, width=99999))
}}}

=== Show dissasembly / bytecode of an associated python function/snippet ===

Example usage: https://www.data-structures-in-practice.com/hash-tables/

Use the `dis` standard library module: https://docs.python.org/3/library/dis.html
Use it e.g., on a function:

{{{python
import dis
f = lambda x: x + 2
dis.dis(f)
1           0 LOAD_FAST                0 (x)
            2 LOAD_CONST               1 (2)
            4 BINARY_ADD
            6 RETURN_VALUE
}}}


=== Configure pyenv manually ===

Normally you'd do this as part of your bashrc/fish.config file. But if you
haven't, here's the commands to do it in the current shell instance

{{{sh
fish )
    set -x PATH \"${PYENV_ROOT}/bin\" \$PATH
    status --is-interactive; and . (pyenv init -|psub)
    status --is-interactive; and . (pyenv virtualenv-init -|psub)
    ;;
* )
    PYENV_ROOT="$HOME/.pyenv"
    export PATH="${PYENV_ROOT}/bin:$PATH"
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
}}}

* Compile python versions from source:
    * You'll need to install OpenSSL first: `apt-get install libssl-dev libffi-dev`

* Format all `.py` files with `black` autoformatter:
    * `fd -e py | xargs -I{} black --line-length 95 -t py36 {}`

* Render a html python string in the browser:

{{{python
# I assume that the text was acquired using the requests library
import webbrowser

with open("a.html", "w") as f:
    f.write(resp.text)

webbrowser.open("a.html")
}}}

=== Sympy - Multiple lines in the same plot ===

{{{python
from sympy import var, cos, plot
x = var('x')
p = plot(cos(x), line_color='r')
p = plot(cos(2*x), line_color='g')
p = plot(cos(4*x), line_color='b')
pl.extend(plot(cos(2*x), line_color='g'))
pl.show()
}}}


=== Set the numpy printing width ===

{{{python
numpy.set_printoptions(linewidth=160)
}}}

{{{python
(Pdb++) p T
array([[ 1.00000000e+00,  1.00284240e-18, -2.28654607e-18,
         0.00000000e+00],
       [ 1.13765545e-18,  1.00000000e+00,  1.29264105e-19,
         0.00000000e+00],
       [-1.39240192e-17,  1.34405256e-19,  1.00000000e+00,
         3.46944695e-18],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         1.00000000e+00]])
(Pdb++) numpy.set_printoptions(linewidth=160)
(Pdb++) p T
array([[ 1.00000000e+00,  1.00284240e-18, -2.28654607e-18,  0.00000000e+00],
       [ 1.13765545e-18,  1.00000000e+00,  1.29264105e-19,  0.00000000e+00],
       [-1.39240192e-17,  1.34405256e-19,  1.00000000e+00,  3.46944695e-18],
       [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00]])
(Pdb++)
}}}

=== Use dbus to send a notification in the system ===

https://github.com/albertlauncher/python/pull/96/files
{{{python
bus = dbus.SessionBus()
notify = dbus.Interface(bus.get_object(dbusItem, dbusPath), dbusInterface)
notify.Notify(__prettyname__, 0, iconPath, title, text, '', '', 0)
}}}

=== Load a module by its absolute/relative path ===

{{{python
spec = importlib.util.spec_from_file_location("bing", "plugins/image_search/bing.py")
foo = importlib.util.module_from_spec(spec)
spec.loader.exec_module(foo)

cl = foo.MyClass()
}}}

=== Pandas ===

* Rename just a single column in pandas: df.rename(columns = {'old_name':'new_name'}, inplace = True)
* Drop column by index i: df.drop(df.columns[i], axis=1)
* Just plain nice: df['Change (%)'] = df['Change (%)'].str.strip('%').astype(float)

=== Spell Checking source code ===

* https://github.com/myint/scspell
    * See `colcon-zsh` (or any other colcon plugin) as an example

== Python __dict__ ==

Every module and object in python has a `__dict__` attribute (you can think of
all the modules as dictionaries that contain their variables, and functions)

* Except int - doesn't have `__dict__`

== Get superclass(es) of class ==

Use `self.__class__.__bases__`

Link: https://stackoverflow.com/a/10092179/2843583


== Contents ==

* [[pip.wiki|Using Pip]]
* [[keyring-issue.wiki|Debugging: Keyring Issue]]
* [[unpackb-msgpack-error.wiki|Debugging: unpackb-msgpack Error]]
* [[simulate-pushd.wiki|Simulate pushd using @contextmanager]]
* [[poetry package manager.wiki|Poetry Package Manager]]
* [[handling-of-integer-objects.wiki|Handling Integer Objects]]
* [[debugging.wiki|Debugging Tools]]
* [[vlc-api.wiki|VLC Python API - Read metadata from network stream]]
* [[iterator-vs-generator.wiki|Iterators vs Generators]]
* [[concerns-when-packaging-c-extensions-in-python-packages.wiki|Concerns Packaging C Extensions in Python Packages]]
* [[obj-unique-name.py.wiki|Python Object Unique Name]]
* [[check-pid.py.wiki|Check if PID exists]]
* [[coding-std-thoughts.wiki|Thought on Python coding standards]]
* [[concurency.wiki|Concurrency and AsyncIO]]
* [[psrecord.wiki|psrecord]]
* [[call-live-output.wiki|Call subprocess and print its output as it comes / live]]
* [[avoid-if-initialisation-cases.wiki|Avoid if-initialisation cases]]
* [[unittest-runner-script.wiki|unittest runner script]]
* [[find-system-installed-version-that-matches.wiki|Find System Installed Version That Matches]]
* [[logging.wiki|Logging]]
* [[code-coverage.wiki|Code Coverage]]
* [[ipython.wiki|ipython Interpeter]]
* [[imports.wiki|Importing in Python]]
* [[readline-enable-tab-completion.wiki|Readline: Enable TAB Completion]]
* [[click-list-all-subcommands.wiki|Click - List all visible, registered subcommands]]
* [[ipdb.wiki|pdb / ipdb]]
* [[pypi_upload.wiki|Upload to PyPI]]
* [[mocking.wiki|Mocking in Python]]
* [[mypy-annotate-self-class-itself.wiki|mypy - annotate self class itself]]
* [[find-nth-occurrance.wiki|Find N-th Occurrence]]
* [[pytest.wiki|Pytest Testing Suite]]
* [[mypy cheatsheet.wiki|Mypy Cheatsheet]]
* [[click-invoke-subcommand-have-common-arguments-for-all-subcommands.py|Invoke a click subcommand - Have all subcommands share a list of arguments]]
* [[regexp-match-urls.wiki|Regexp: Match URLs]]
* [[packaging-options.wiki|Packaging Options]]
* [[numba.wiki|numba]]
* [[update-python-project-version.wiki|Bumping the version of your Python Project]]
* [[language-implementations.wiki|Implementations of the Python Specification]]
* [[pyproject-toml.wiki|pyproject.toml]]
* [[pyc-files.wiki|pyc-files]]